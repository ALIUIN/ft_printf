#include "../ft_printf.h"

int ft_put_i_fd(long long i, char *nb)
{
    if (!nb)
        return (-1);
    if (*nb == '+' || *nb == '-')
        return (0);
    if (i < 0)
        *nb = '-';
    if (i > 0)
        *nb = '+';
    return (1);
}

int ft_put_d_fd(int i, char *nb)
{
    if (!nb)
        return (-1);
    if (*nb == '+' || *nb == '-')
        return (0);
    if (i < 0)
        *nb = '-';
    if (i > 0)
        *nb = '+';
    return (1);
}
#include "../ft_printf.h"

int	is_inset(int c)
{
	while (*str)
	{
		if (*str == c)
			return (1);
		str++;
	}
	return (0);
}

int	ft_put_bonus(const char *s, va_list ap)
{
	if (*s == '%')
		return (ft_putchar_fd(*s, 1));
	else if (*s == 'c')
		return (ft_putchar_fd(va_arg(ap, int), 1));
	else if (*s == 's')
		return (ft_putstrhand_fd(va_arg(ap, char *), 1));
	else if (*s == 'p')
		return (ft_putadr_fd(va_arg(ap, void *), 1));
	else if (*s == 'i')
		return (ft_putnbrbase_fd((long long)va_arg(ap, int), 1, 10, 0));
	else if (*s == 'd')
		return (ft_putnbrbase_fd(va_arg(ap, int), 1, 10, 0));
	else if (*s == 'u')
		return (ft_putnbrbase_fd(va_arg(ap, unsigned int), 1, 10, 0));
	else if (*s == 'x')
		return (ft_hex((unsigned long long)va_arg(ap, unsigned int), 1, 0));
	else if (*s == 'X')
		return (ft_hex((unsigned long long)va_arg(ap, unsigned int), 1, 1));
	else
		return (-1);
}

int	ft_putplus_fd(const char *s, va_list ap, char *nb)
{
	char	itr[8];
	int		d;
	long long	i;
	int		u;

	while (!is_inset(*s) && *s)
		s++;
	if (*s == 'i')
	{
		i = (long long)va_arg(ap, int);
		ft_put_id_fd(i, nb);

	}
	else if (*s == 'u')
		u = va_arg(ap, unsigned int);
	else if (*s == 'd')
		d = va_arg(ap, int);
	else
	{

	}
}

int	ft_put_bonus(const char *s, va_list ap, char *nb)
{
	if (!nb)
	{
		nb = malloc(30 * sizeof(char));
		if (!nb)
			return (-1);
	}
	nb = malloc(30 * sizeof(char *));
	if (*s == '+')
		// case 1;
	if (*s == ' ')
		// case 2
	if (*s == '0')
		// case 3
	if (*s == '#')
		// case 4
	if (*s == '.')
		// case 5
	if (*s == '-')
		// case 6
}

int	ft_printf_bonus(const char *__format, ...)
{
	va_list		ap;
	char		*s;
	int			count;
	int			res;

	count = 0;
	s = (char *)__format;
	va_start(ap, __format);
	while (*s)
	{
		if (*s == '%')
		{
			res = ft_put_bonus(++s, ap);
			if (res < 0)
				return (ft_puterror(s + 1, count));
			count += res;
		}
		else
			count += ft_putchar_fd(*s, 1);
		s++;
	}
	va_end(ap);
	return (count);
}
